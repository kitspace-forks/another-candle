

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 28 15:22:52 2017

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	10F320
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.45
    16                           ; Generated 16/11/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC10F320 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0020                     	;# 
    84  0020                     	;# 
    85  0021                     	;# 
    86  0022                     	;# 
    87  0022                     	;# 
    88  0023                     	;# 
    89  0024                     	;# 
    90  0025                     	;# 
    91  0026                     	;# 
    92  0027                     	;# 
    93  0027                     	;# 
    94  0028                     	;# 
    95  0029                     	;# 
    96  002A                     	;# 
    97  002A                     	;# 
    98  002B                     	;# 
    99  002C                     	;# 
   100  002D                     	;# 
   101  002E                     	;# 
   102  0030                     	;# 
   103  0031                     	;# 
   104  0032                     	;# 
   105  0033                     	;# 
   106  0034                     	;# 
   107  0035                     	;# 
   108  0036                     	;# 
   109  0037                     	;# 
   110  0038                     	;# 
   111  0039                     	;# 
   112  003A                     	;# 
   113  003B                     	;# 
   114  003C                     	;# 
   115  003D                     	;# 
   116  003E                     	;# 
   117  003F                     	;# 
   118                           
   119                           	psect	idataBANK0
   120  00FB                     __pidataBANK0:	
   121                           
   122                           ;initializer for _lfsr
   123  00FB  34D3               	retlw	211
   124  00FC  345A               	retlw	90
   125                           
   126                           ;initializer for _oscillate
   127  00FD  3402               	retlw	2
   128                           
   129                           ;initializer for _target
   130  00FE  347F               	retlw	127
   131                           
   132                           ;initializer for _length
   133  00FF  347F               	retlw	127
   134  001E                     _ADRES	set	30
   135  000E                     _OPTION_REGbits	set	14
   136  0030                     _WDTCONbits	set	48
   137  0013                     _T2CONbits	set	19
   138  0019                     _PWM2CONbits	set	25
   139  0016                     _PWM1CONbits	set	22
   140  001F                     _ADCONbits	set	31
   141  0008                     _ANSELAbits	set	8
   142  0006                     _TRISAbits	set	6
   143  000B                     _INTCONbits	set	11
   144  0001                     _TMR0	set	1
   145  0018                     _PWM2DCH	set	24
   146  0015                     _PWM1DCH	set	21
   147                           
   148                           ; #config settings
   149  0000                     
   150                           	psect	cinit
   151  000F                     start_initialization:	
   152  000F                     __initialization:	
   153                           
   154                           ; Initialize objects allocated to BANK0
   155  000F  20FB               	fcall	__pidataBANK0	;fetch initializer
   156  0010  00D0               	movwf	__pdataBANK0& (0+127)
   157  0011  20FC               	fcall	__pidataBANK0+1	;fetch initializer
   158  0012  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   159  0013  20FD               	fcall	__pidataBANK0+2	;fetch initializer
   160  0014  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   161  0015  20FE               	fcall	__pidataBANK0+3	;fetch initializer
   162  0016  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   163  0017  20FF               	fcall	__pidataBANK0+4	;fetch initializer
   164  0018  00D4               	movwf	(__pdataBANK0+4)& (0+127)
   165                           
   166                           ; Clear objects allocated to BANK0
   167  0019  01CA               	clrf	__pbssBANK0& (0+127)
   168  001A  01CB               	clrf	(__pbssBANK0+1)& (0+127)
   169  001B  01CC               	clrf	(__pbssBANK0+2)& (0+127)
   170  001C  01CD               	clrf	(__pbssBANK0+3)& (0+127)
   171  001D  01CE               	clrf	(__pbssBANK0+4)& (0+127)
   172  001E  01CF               	clrf	(__pbssBANK0+5)& (0+127)
   173  001F                     end_of_initialization:	
   174                           ;End of C runtime variable initialization code
   175                           
   176  001F                     __end_of__initialization:	
   177  001F  0183               	clrf	3
   178  0020  28CE               	ljmp	_main	;jump to C main() function
   179                           
   180                           	psect	bssBANK0
   181  004A                     __pbssBANK0:	
   182  004A                     _fb:	
   183  004A                     	ds	2
   184  004C                     _recover:	
   185  004C                     	ds	1
   186  004D                     _quietCycles:	
   187  004D                     	ds	1
   188  004E                     _right:	
   189  004E                     	ds	1
   190  004F                     _left:	
   191  004F                     	ds	1
   192                           
   193                           	psect	dataBANK0
   194  0050                     __pdataBANK0:	
   195  0050                     _lfsr:	
   196  0050                     	ds	2
   197  0052                     _oscillate:	
   198  0052                     	ds	1
   199  0053                     _target:	
   200  0053                     	ds	1
   201  0054                     _length:	
   202  0054                     	ds	1
   203                           
   204                           	psect	cstackCOMMON
   205  0000                     __pcstackCOMMON:	
   206  0000                     ??_main:	
   207                           
   208                           	psect	cstackBANK0
   209  0040                     __pcstackBANK0:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0040                     ?_isr:	
   213  0040                     ??_isr:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0040                     ?_main:	
   217                           ; 1 bytes @ 0x0
   218                           
   219                           
   220                           ; 1 bytes @ 0x0
   221  0040                     	ds	10
   222                           
   223                           	psect	maintext
   224  00CE                     __pmaintext:	
   225 ;;
   226 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   227 ;;
   228 ;; *************** function _main *****************
   229 ;; Defined at:
   230 ;;		line 83 in file "main.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;		None
   233 ;; Auto vars:     Size  Location     Type
   234 ;;		None
   235 ;; Return value:  Size  Location     Type
   236 ;;                  1    wreg      void 
   237 ;; Registers used:
   238 ;;		wreg, status,2, status,0
   239 ;; Tracked objects:
   240 ;;		On entry : B00/0
   241 ;;		On exit  : 0/0
   242 ;;		Unchanged: 0/0
   243 ;; Data sizes:     COMMON   BANK0
   244 ;;      Params:         0       0
   245 ;;      Locals:         0       0
   246 ;;      Temps:          0       0
   247 ;;      Totals:         0       0
   248 ;;Total ram usage:        0 bytes
   249 ;; Hardware stack levels required when called:    1
   250 ;; This function calls:
   251 ;;		Nothing
   252 ;; This function is called by:
   253 ;;		Startup code after reset
   254 ;; This function uses a non-reentrant model
   255 ;;
   256                           
   257                           
   258                           ;psect for function _main
   259  00CE                     _main:	
   260                           
   261                           ;main.c: 88: TRISAbits.TRISA0 = 0b0;
   262                           
   263                           ;incstack = 0
   264                           ; Regs used in _main: [wreg+status,2+status,0]
   265  00CE  1006               	bcf	6,0	;volatile
   266                           
   267                           ;main.c: 89: TRISAbits.TRISA1 = 0b0;
   268  00CF  1086               	bcf	6,1	;volatile
   269                           
   270                           ;main.c: 92: ANSELAbits.ANSA0 = 0b0;
   271  00D0  1008               	bcf	8,0	;volatile
   272                           
   273                           ;main.c: 93: ANSELAbits.ANSA1 = 0b0;
   274  00D1  1088               	bcf	8,1	;volatile
   275                           
   276                           ;main.c: 97: ADCONbits.CHS = 0b010;
   277  00D2  081F               	movf	31,w	;volatile
   278  00D3  39E3               	andlw	-29
   279  00D4  3808               	iorlw	8
   280  00D5  009F               	movwf	31	;volatile
   281                           
   282                           ;main.c: 98: ADCONbits.ADON = 1;
   283  00D6  141F               	bsf	31,0	;volatile
   284                           
   285                           ;main.c: 99: ADCONbits.ADCS = 0b010;
   286  00D7  081F               	movf	31,w	;volatile
   287  00D8  391F               	andlw	-225
   288  00D9  3840               	iorlw	64
   289  00DA  009F               	movwf	31	;volatile
   290                           
   291                           ;main.c: 107: PWM1CONbits.PWM1EN = 1;
   292  00DB  1796               	bsf	22,7	;volatile
   293                           
   294                           ;main.c: 108: PWM1CONbits.PWM1OE = 1;
   295  00DC  1716               	bsf	22,6	;volatile
   296                           
   297                           ;main.c: 109: PWM2CONbits.PWM2EN = 1;
   298  00DD  1799               	bsf	25,7	;volatile
   299                           
   300                           ;main.c: 110: PWM2CONbits.PWM2OE = 1;
   301  00DE  1719               	bsf	25,6	;volatile
   302                           
   303                           ;main.c: 115: T2CONbits.TMR2ON = 1;
   304  00DF  1513               	bsf	19,2	;volatile
   305                           
   306                           ;main.c: 118: WDTCONbits.WDTPS = 0b01101;
   307  00E0  0830               	movf	48,w	;volatile
   308  00E1  39C1               	andlw	-63
   309  00E2  381A               	iorlw	26
   310  00E3  00B0               	movwf	48	;volatile
   311                           
   312                           ;main.c: 122: OPTION_REGbits.T0CS = 0;
   313  00E4  128E               	bcf	14,5	;volatile
   314                           
   315                           ;main.c: 123: OPTION_REGbits.PSA = 0;
   316  00E5  118E               	bcf	14,3	;volatile
   317                           
   318                           ;main.c: 124: OPTION_REGbits.PS = 0b111;
   319  00E6  3007               	movlw	7
   320  00E7  048E               	iorwf	14,f	;volatile
   321                           
   322                           ;main.c: 128: INTCONbits.TMR0IE = 1;
   323  00E8  168B               	bsf	11,5	;volatile
   324                           
   325                           ;main.c: 129: INTCONbits.GIE = 1;
   326  00E9  178B               	bsf	11,7	;volatile
   327  00EA                     l623:	
   328                           ;main.c: 132: while(1) {
   329                           
   330                           
   331                           ;main.c: 133: ADCONbits.GO_nDONE = 1;
   332  00EA  149F               	bsf	31,1	;volatile
   333  00EB                     l70:	
   334                           ;main.c: 134: while(ADCONbits.GO_nDONE){
   335                           
   336  00EB  1C9F               	btfss	31,1	;volatile
   337  00EC  28EF               	goto	l625
   338                           
   339                           ;main.c: 135: __nop();
   340  00ED  0000               	nop
   341  00EE  28EB               	goto	l70
   342  00EF                     l625:	
   343                           
   344                           ;main.c: 136: }
   345                           ;main.c: 137: if(ADRES > 0xE0){
   346  00EF  30E1               	movlw	225
   347  00F0  021E               	subwf	30,w	;volatile
   348  00F1  1C03               	skipc
   349  00F2  28F7               	goto	l73
   350                           
   351                           ;main.c: 138: PWM1CONbits.PWM1OE = 0;
   352  00F3  1316               	bcf	22,6	;volatile
   353                           
   354                           ;main.c: 139: PWM2CONbits.PWM2OE = 0;
   355  00F4  1319               	bcf	25,6	;volatile
   356  00F5  0063               	sleep	;# 
   357                           
   358                           ;main.c: 141: } else {
   359  00F6  28F9               	goto	l74
   360  00F7                     l73:	
   361                           
   362                           ;main.c: 142: PWM1CONbits.PWM1OE = 1;
   363  00F7  1716               	bsf	22,6	;volatile
   364                           
   365                           ;main.c: 143: PWM2CONbits.PWM2OE = 1;
   366  00F8  1719               	bsf	25,6	;volatile
   367  00F9                     l74:	
   368  00F9  0064               	clrwdt	;# 
   369  00FA  28EA               	goto	l623
   370  00FB                     __end_of_main:	
   371                           
   372                           	psect	text1
   373  0021                     __ptext1:	
   374 ;; *************** function _isr *****************
   375 ;; Defined at:
   376 ;;		line 37 in file "main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;		None
   381 ;; Return value:  Size  Location     Type
   382 ;;                  1    wreg      void 
   383 ;; Registers used:
   384 ;;		wreg, status,2, status,0, btemp+1
   385 ;; Tracked objects:
   386 ;;		On entry : 0/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0
   390 ;;      Params:         0       0
   391 ;;      Locals:         0       0
   392 ;;      Temps:          0      10
   393 ;;      Totals:         0      10
   394 ;;Total ram usage:       10 bytes
   395 ;; Hardware stack levels used:    1
   396 ;; This function calls:
   397 ;;		Nothing
   398 ;; This function is called by:
   399 ;;		Interrupt level 1
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           
   404                           ;psect for function _isr
   405  0021                     _isr:	
   406                           
   407                           ;main.c: 38: if (left == target) {
   408  0021  084F               	movf	_left,w
   409  0022  0653               	xorwf	_target,w
   410  0023  1D03               	skipz
   411  0024  28A5               	goto	i1l581
   412                           
   413                           ;main.c: 39: if (oscillate) {
   414  0025  0852               	movf	_oscillate,w
   415  0026  1903               	btfsc	3,2
   416  0027  2848               	goto	i1l557
   417                           
   418                           ;main.c: 40: oscillate--;
   419  0028  3001               	movlw	1
   420  0029  02D2               	subwf	_oscillate,f
   421                           
   422                           ;main.c: 41: recover = 0;
   423  002A  01CC               	clrf	_recover
   424                           
   425                           ;main.c: 42: if (oscillate < 2) {
   426  002B  3002               	movlw	2
   427  002C  0252               	subwf	_oscillate,w
   428  002D  1803               	skipnc
   429  002E  2831               	goto	i1l53
   430                           
   431                           ;main.c: 43: target = 128;
   432  002F  3080               	movlw	128
   433  0030  2834               	goto	L1
   434  0031                     i1l53:	
   435                           ;main.c: 44: } else {
   436                           
   437                           
   438                           ;main.c: 45: if (oscillate % 2) {
   439  0031  1C52               	btfss	_oscillate,0
   440  0032  2838               	goto	i1l555
   441                           
   442                           ;main.c: 46: target = 96;
   443  0033  3060               	movlw	96
   444  0034                     L1:	
   445  0034  00C0               	movwf	??_isr
   446  0035  0840               	movf	??_isr,w
   447  0036  00D3               	movwf	_target
   448                           
   449                           ;main.c: 47: } else {
   450  0037  28A5               	goto	i1l581
   451  0038                     i1l555:	
   452                           
   453                           ;main.c: 48: target = 224 - ((32-oscillate)*2);
   454  0038  0352               	decf	_oscillate,w
   455  0039  3AFF               	xorlw	255
   456  003A  00C0               	movwf	??_isr
   457  003B  0740               	addwf	??_isr,w
   458  003C  3E40               	addlw	64
   459  003D  3AFF               	xorlw	255
   460  003E  3E01               	addlw	1
   461  003F  3EE0               	addlw	224
   462  0040  00C1               	movwf	??_isr+1
   463  0041  0841               	movf	??_isr+1,w
   464  0042  00D3               	movwf	_target
   465                           
   466                           ;main.c: 49: length++;
   467  0043  3001               	movlw	1
   468  0044  00C0               	movwf	??_isr
   469  0045  0840               	movf	??_isr,w
   470  0046  07D4               	addwf	_length,f
   471                           
   472                           ;main.c: 50: }
   473                           ;main.c: 51: }
   474                           ;main.c: 52: } else {
   475  0047  28A5               	goto	i1l581
   476  0048                     i1l557:	
   477                           
   478                           ;main.c: 53: fb = ((lfsr >> 1) ^ (lfsr >> 2)) & 1;
   479  0048  0851               	movf	_lfsr+1,w
   480  0049  00C1               	movwf	??_isr+1
   481  004A  0850               	movf	_lfsr,w
   482  004B  00C0               	movwf	??_isr
   483  004C  1003               	clrc
   484  004D  0CC1               	rrf	??_isr+1,f
   485  004E  0CC0               	rrf	??_isr,f
   486  004F  1003               	clrc
   487  0050  0CC1               	rrf	??_isr+1,f
   488  0051  0CC0               	rrf	??_isr,f
   489  0052  0851               	movf	_lfsr+1,w
   490  0053  00C3               	movwf	??_isr+3
   491  0054  0850               	movf	_lfsr,w
   492  0055  00C2               	movwf	??_isr+2
   493  0056  1003               	clrc
   494  0057  0CC3               	rrf	??_isr+3,f
   495  0058  0CC2               	rrf	??_isr+2,f
   496  0059  0840               	movf	??_isr,w
   497  005A  0642               	xorwf	??_isr+2,w
   498  005B  00C4               	movwf	??_isr+4
   499  005C  0841               	movf	??_isr+1,w
   500  005D  0643               	xorwf	??_isr+3,w
   501  005E  00C5               	movwf	??_isr+5
   502  005F  3001               	movlw	1
   503  0060  0544               	andwf	??_isr+4,w
   504  0061  00CA               	movwf	_fb
   505  0062  3000               	movlw	0
   506  0063  0545               	andwf	??_isr+5,w
   507  0064  00CB               	movwf	_fb+1
   508                           
   509                           ;main.c: 54: lfsr = (lfsr >> 1) | (fb << 15);
   510  0065  084B               	movf	_fb+1,w
   511  0066  00C1               	movwf	??_isr+1
   512  0067  084A               	movf	_fb,w
   513  0068  00C0               	movwf	??_isr
   514  0069  300F               	movlw	15
   515  006A  00FF               	movwf	127
   516  006B                     u17_25:	
   517  006B  1003               	clrc
   518  006C  0DC0               	rlf	??_isr,f
   519  006D  0DC1               	rlf	??_isr+1,f
   520  006E  0BFF               	decfsz	127,f
   521  006F  286B               	goto	u17_25
   522  0070  0851               	movf	_lfsr+1,w
   523  0071  00C3               	movwf	??_isr+3
   524  0072  0850               	movf	_lfsr,w
   525  0073  00C2               	movwf	??_isr+2
   526  0074  1003               	clrc
   527  0075  0CC3               	rrf	??_isr+3,f
   528  0076  0CC2               	rrf	??_isr+2,f
   529  0077  0840               	movf	??_isr,w
   530  0078  0442               	iorwf	??_isr+2,w
   531  0079  00D0               	movwf	_lfsr
   532  007A  0841               	movf	??_isr+1,w
   533  007B  0443               	iorwf	??_isr+3,w
   534  007C  00D1               	movwf	_lfsr+1
   535                           
   536                           ;main.c: 55: target = lfsr & 0x00FF;
   537  007D  0850               	movf	_lfsr,w
   538  007E  00C0               	movwf	??_isr
   539  007F  0840               	movf	??_isr,w
   540  0080  00D3               	movwf	_target
   541                           
   542                           ;main.c: 56: if (target < 16 && quietCycles > 8) {
   543  0081  3010               	movlw	16
   544  0082  0253               	subwf	_target,w
   545  0083  1803               	skipnc
   546  0084  289B               	goto	i1l577
   547  0085  3009               	movlw	9
   548  0086  024D               	subwf	_quietCycles,w
   549  0087  1C03               	skipc
   550  0088  289B               	goto	i1l577
   551                           
   552                           ;main.c: 57: oscillate = ((lfsr & 0x1F00) >> 8) | 0x08;
   553  0089  0851               	movf	_lfsr+1,w
   554  008A  391F               	andlw	31
   555  008B  3808               	iorlw	8
   556  008C  00C0               	movwf	??_isr
   557  008D  0840               	movf	??_isr,w
   558  008E  00D2               	movwf	_oscillate
   559                           
   560                           ;main.c: 58: length = 5;
   561  008F  3005               	movlw	5
   562  0090  00C0               	movwf	??_isr
   563  0091  0840               	movf	??_isr,w
   564  0092  00D4               	movwf	_length
   565                           
   566                           ;main.c: 59: target = 128;
   567  0093  3080               	movlw	128
   568  0094  00C0               	movwf	??_isr
   569  0095  0840               	movf	??_isr,w
   570  0096  00D3               	movwf	_target
   571                           
   572                           ;main.c: 60: quietCycles = 0;
   573  0097  01CD               	clrf	_quietCycles
   574                           
   575                           ;main.c: 61: recover = 1;
   576  0098  01CC               	clrf	_recover
   577  0099  0ACC               	incf	_recover,f
   578                           
   579                           ;main.c: 62: } else {
   580  009A  28A5               	goto	i1l581
   581  009B                     i1l577:	
   582                           
   583                           ;main.c: 63: length = ((lfsr & 0x7F00) >> 8) | 0x20;
   584  009B  0851               	movf	_lfsr+1,w
   585  009C  397F               	andlw	127
   586  009D  3820               	iorlw	32
   587  009E  00C0               	movwf	??_isr
   588  009F  0840               	movf	??_isr,w
   589  00A0  00D4               	movwf	_length
   590                           
   591                           ;main.c: 64: quietCycles++;
   592  00A1  3001               	movlw	1
   593  00A2  00C0               	movwf	??_isr
   594  00A3  0840               	movf	??_isr,w
   595  00A4  07CD               	addwf	_quietCycles,f
   596  00A5                     i1l581:	
   597                           
   598                           ;main.c: 65: }
   599                           ;main.c: 66: }
   600                           ;main.c: 67: }
   601                           ;main.c: 70: if (left < target) left++;
   602  00A5  0853               	movf	_target,w
   603  00A6  024F               	subwf	_left,w
   604  00A7  1803               	skipnc
   605  00A8  28AE               	goto	i1l585
   606  00A9  3001               	movlw	1
   607  00AA  00C0               	movwf	??_isr
   608  00AB  0840               	movf	??_isr,w
   609  00AC  07CF               	addwf	_left,f
   610  00AD  28B0               	goto	i1l61
   611  00AE                     i1l585:	
   612                           
   613                           ;main.c: 71: else left--;
   614  00AE  3001               	movlw	1
   615  00AF  02CF               	subwf	_left,f
   616  00B0                     i1l61:	
   617                           
   618                           ;main.c: 72: if (oscillate && !recover) right = left;
   619  00B0  0852               	movf	_oscillate,w
   620  00B1  1903               	btfsc	3,2
   621  00B2  28B8               	goto	i1l591
   622  00B3  084C               	movf	_recover,w
   623  00B4  1D03               	btfss	3,2
   624  00B5  28B8               	goto	i1l591
   625  00B6  084F               	movf	_left,w
   626  00B7  28B9               	goto	L2
   627  00B8                     i1l591:	
   628                           
   629                           ;main.c: 73: else right = ~left;
   630  00B8  094F               	comf	_left,w
   631  00B9                     L2:	
   632  00B9  00C0               	movwf	??_isr
   633  00BA  0840               	movf	??_isr,w
   634  00BB  00CE               	movwf	_right
   635                           
   636                           ;main.c: 76: PWM1DCH = left;
   637  00BC  084F               	movf	_left,w
   638  00BD  0095               	movwf	21	;volatile
   639                           
   640                           ;main.c: 77: PWM2DCH = right;
   641  00BE  084E               	movf	_right,w
   642  00BF  0098               	movwf	24	;volatile
   643                           
   644                           ;main.c: 78: TMR0 = ~length;
   645  00C0  0954               	comf	_length,w
   646  00C1  0081               	movwf	1	;volatile
   647                           
   648                           ;main.c: 80: INTCONbits.TMR0IF = 0;
   649  00C2  110B               	bcf	11,2	;volatile
   650  00C3  0849               	movf	??_isr+9,w
   651  00C4  00FF               	movwf	127
   652  00C5  0848               	movf	??_isr+8,w
   653  00C6  008A               	movwf	10
   654  00C7  0847               	movf	??_isr+7,w
   655  00C8  0084               	movwf	4
   656  00C9  0E46               	swapf	(??_isr+6)^0,w
   657  00CA  0083               	movwf	3
   658  00CB  0EFE               	swapf	126,f
   659  00CC  0E7E               	swapf	126,w
   660  00CD  0009               	retfie
   661  00CE                     __end_of_isr:	
   662  007E                     btemp	set	126	;btemp
   663  007E                     wtemp0	set	126
   664                           
   665                           	psect	intentry
   666  0004                     __pintentry:	
   667                           ;incstack = 0
   668                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1]
   669                           
   670  0004                     interrupt_function:	
   671  007E                     saved_w	set	btemp
   672  0004  00FE               	movwf	btemp
   673  0005  0E03               	swapf	3,w
   674  0006  00C6               	movwf	??_isr+6
   675  0007  0804               	movf	4,w
   676  0008  00C7               	movwf	??_isr+7
   677  0009  080A               	movf	10,w
   678  000A  00C8               	movwf	??_isr+8
   679  000B  087F               	movf	btemp+1,w
   680  000C  00C9               	movwf	??_isr+9
   681  000D  2821               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     10      21

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                 10    10      0       0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK0               3E      A      15       3       33.9%
BITBANK0            3E      0       0       6        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      15       5        0.0%
ABS                  0      0      15       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 28 15:22:52 2017

            __CFG_CP$OFF 0000                       l70 00EB                       l73 00F7  
                     l74 00F9                       _fb 004A                      l623 00EA  
                    l625 00EF                      _isr 0021                      fsr0 0004  
           __CFG_BORV$LO 0000             __CFG_LVP$OFF 0000                     ?_isr 0040  
           __CFG_WDTE$ON 0000                     i1l61 00B0                     i1l53 0031  
                   _TMR0 0001             __CFG_WRT$OFF 0000                     _main 00CE  
                   _left 004F                     _lfsr 0050                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 000E            __CFG_LPBOR$ON 0000  
                  ??_isr 0040                    ?_main 0040                    _ADRES 001E  
                  i1l555 0038                    i1l557 0048                    i1l581 00A5  
                  i1l591 00B8                    i1l585 00AE                    i1l577 009B  
                  u17_25 006B                    _right 004E                    pclath 000A  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 000F             __end_of_main 00FB                   ??_main 0000  
         __CFG_PWRTE$OFF 0000                   _length 0054                   _target 0053  
                 saved_w 007E  __end_of__initialization 001F           __pcstackCOMMON 0000  
           __pidataBANK0 00FB           _OPTION_REGbits 000E               __pbssBANK0 004A  
             __pmaintext 00CE               __pintentry 0004                  _PWM1DCH 0015  
                _PWM2DCH 0018                _ADCONbits 001F                  __ptext1 0021  
              _T2CONbits 0013             __size_of_isr 00AD                  _recover 004C  
   end_of_initialization 001F         __CFG_FOSC$INTOSC 0000                _TRISAbits 0006  
    start_initialization 000F              __end_of_isr 00CE              __pdataBANK0 0050  
              ___latbits 0000            __pcstackBANK0 0040        interrupt_function 0004  
              _oscillate 0052               _ANSELAbits 0008            __size_of_main 002D  
             _INTCONbits 000B              _PWM1CONbits 0016              _PWM2CONbits 0019  
               intlevel1 0000               _WDTCONbits 0030              _quietCycles 004D  
